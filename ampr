#!/bin/bash

#
#Automatic Multipath Route: keep any number of multipath routes with any number of nexthop routers.
# Copyright (C) 2013 Diego Augusto Molina
#
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU
# General Public Licence Version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public Licence for more details.
#
# You should have recieved a copy of the GNU General Public Licence along with this program; if not,
# write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
# USA.
#

####################################################################################################
####################################################################################################
####################################################################################################

  # Strictness
set -o posix;
set -u;
set +H;
set +e;
export LC_ALL=C;

  # Include the code of the "pingmon" function. Would be fatal if couldn't
set -e;
source "$(dirname "$0")/libpingmon.sh";
set +e;

##### Declarations #################################################################################

declare -ar VARS_OVERWRITE=( NWEIGHT HLWEIGHT INIT PINGMONOPTS REST PRETEND TROUBLESHOOT );
declare -a line ROUTES ROUTE_PATHS PATHS;
declare -i r=-1 p=-1 in_def_head=0 INIT=1 NWEIGHT=5 HLWEIGHT=3 PRETEND=0 TROUBLESHOOT=0;
declare v x AMPR_REPLY CONFIG_FILE REST=1;
declare PINGMONOPTS="-q 0";
declare -r AMPR_TRAPS="RETURN SIGTERM SIGINT SIGHUP";

##### Functions ####################################################################################

hlp(){
  echo "
Automatic Multipath Route: keep any number of multipath routes with any number of nexthop routers.
  Copyright (C) 2013 Diego Augusto Molina

  This program is free software; you can redistribute it and/or modify it under the terms of the GNU
  General Public Licence Version 2 as published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  General Public Licence for more details.

  You should have recieved a copy of the GNU General Public Licence along with this program; if not,
  write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
  USA.

Usage:
  1) Get this help:
    ${0}
  2) Do AMPR:
    ${0} CONFIG_FILE
  3) Only execute the 'pingmon' function (with no extra arguments will give you help):
    ${0} pingmon [pingmon args]

This program must be run as root to actually perform any change to the routing tables.

Current defaults:
  * NWEIGHT=$NWEIGHT
  * HLWEIGHT=$HLWEIGHT
  * INIT=$INIT
  * PINGMONOPTS=${PINGMONOPTS}
  * REST=$REST
  * PRETEND=$PRETEND
  * TROUBLESHOOT=$TROUBLESHOOT
" >&2;
  exit 0;
};

##### Parse command line arguments #################################################################

if [ $# -eq 0 ]; then
  hlp;
fi;

if [ "$1" = "pingmon" ]; then
  shift;
  if [ $# -gt 0 ]; then
    pingmon "$@";
  else
    pingmon;
  fi;
  exit $?;
fi;

if [ $# -ne 1 ]; then
  echo "ERROR: too many arguments." >&2;
  hlp;

elif [ ! -r "$1" ] || [ ! -f "$1" ]; then
  echo "ERROR: can't open regular file '$1' for reading." >&2;
  hlp;
fi;

readonly CONFIG_FILE="$1";

  ## Read config file
while read AMPR_REPLY; do
    # If it's a header
  if [ "${AMPR_REPLY:0:1}" = "[" ]; then
    if [ "$AMPR_REPLY" = "[general]" ]; then
      in_def_head=1;
    else
      in_def_head=0;
      r=${#ROUTES[@]};
      ROUTES[$r]="${AMPR_REPLY:1:${#AMPR_REPLY}-2}";
    fi;

    # If it's a variable
  elif [ $in_def_head -eq 1 ]; then
    for v in "${VARS_OVERWRITE[@]}"; do
      if [ "$v" = "${AMPR_REPLY/=*}" ]; then
        eval "${AMPR_REPLY/=*}"="'${AMPR_REPLY#*=}'";
        break;
      fi;
    done;

    # If it's a path
  else
    if [ $r -eq -1 ]; then
      echo "Error parsing config file on line '$AMPR_REPLY'. No previus section declared." >&2;
      exit 1;
    fi;

    p=${#PATHS[@]};
    ROUTE_PATHS[$r]="${ROUTE_PATHS[$r]:-} $p";
    line=( $AMPR_REPLY );
    if [ ${#line[@]} -gt 3 ]; then
      PATHS[$p]="$AMPR_REPLY";
    elif [ ${#line[@]} -gt 2 ]; then
      PATHS[$p]="$AMPR_REPLY $NWEIGHT,$HLWEIGHT";
    else
      echo "Error parsing config file on line '$AMPR_REPLY'." >&2;
      exit 1;
    fi;
  fi;
done <<< "$(
    ## Delete comments and empty lines and make all lower case
  sed '/^\s*\(#.*\)*$/d; s/^\s*//g' "${CONFIG_FILE}"
)";

  # Protect variables in this context. Two things are infinite...
readonly ROUTES ROUTE_PATHS PATHS PINGMONOPTS NWEIGHT HLWEIGHT INIT REST;

##### Execute action: troubleshoot #################################################################

if [ $TROUBLESHOOT -ne 0 ]; then
  read -p "Please, enter the name of the file where to save troubleshooting information: " x;
  set -e;
  trap "echo \"Error: cannot open file '$x' for writing.\" >&2;" ERR;
  ( echo -n "" > "$x"; ) &> /dev/null;
  set +e;
  trap - ERR;
  echo "Generating troubleshooting report file. Please, stand by...";
  for v in "ping -V" "ping --version" "ping -c 3 127.0.0.1" "type sleep" "sleep --version" "ip -V";
  do
    echo "########## $v ##########" >> "$x";
    $v >> "$x" 2>&1;
  done;
  for v in /etc/*release* "$CONFIG_FILE"; do
    echo "########## ${v} ##########" >> "$x";
    cat "$v" >> "$x";
  done;
  echo "Troubleshooting report file ready. Please, attach it to your bug report and send it to" \
    "diegoaugustomolina (at) gmail (dot) com with a suubject begginning with '[ampr].'";
  exit 0;
fi;

##### Execute action: AMPR #########################################################################
export TTY=$(tty);
  # Shall we pretend?
if [ $PRETEND -ne 0 ]; then
  alias ip='echo ip';

elif [ $EUID -ne 0 ]; then
  echo "ERROR: not running as root." >&2;
  hlp;
fi;


  # Initialize routes for the paths
if [ $INIT -ne 0 ]; then
  for v in "${PATHS[@]}"; do
    line=( $v );
    ip route replace ${line[0]}/32 dev ${line[1]} via ${line[2]};
  done;
fi;

  # Trap signals and kill all processes in the same process group. FIXME: how portable is this?
trap 'kill -9 0;' $AMPR_TRAPS;

  # Execute de main program
for r in "${!ROUTE_PATHS[@]}"; do
  if [ -z "${r:-}" ]; then
    continue;
  fi;
  for p in ${ROUTE_PATHS[$r]}; do

    line=( ${PATHS[$p]} );
    pingmon $PINGMONOPTS ${line[@]:4} ${line[0]} 2>&1 1> /dev/null | {
      while read AMPR_REPLY; do
          # Determine signal type and forward it with the route and the path
        case "${AMPR_REPLY:0:13}" in
          "### ERROR #0 ")
            echo OK $r $p $(date '+%s %Y-%m-%d %H:%M:%S') "Err#"0;
            ;;

          "### ERROR #3 ")
            echo HLAT $r $p $(date '+%s %Y-%m-%d %H:%M:%S') "Err#"3;
            ;;

          "### ERROR #"*)
            echo FAIL $r $p $(date '+%s %Y-%m-%d %H:%M:%S') "Err#"${AMPR_REPLY:11:2};
            ;;

          *)
            # There might be other stuff in stderr, and nothing should be done for that
            true;
            ;;
        esac;
      done;
    } &

  done;
done | {
    ## Initialize
  declare -a paths=() reply=();
  declare weight;

  while read AMPR_REPLY; do

    if [ $PRETEND -ne 0 ]; then
      echo -e "\n*** EVENT TRIGGERED: $AMPR_REPLY";
    fi;

    reply=( $AMPR_REPLY );
    case "${reply[0]}" in
      FAIL)
          ## If this connection has already failed (probably with another error) skip the signal.
          # Another posibility is that it is the first time and 'paths' is still empty
        if [ -z "${paths[${reply[2]}]:-}" ]; then
          if [ $PRETEND -ne 0 ]; then
            echo "(SKIPPED)";
          fi;
          continue;
        fi;
        unset paths[${reply[2]}];
        ;;

      HLAT)
        line=( ${PATHS[${reply[2]}]} );
        weight=$HLWEIGHT;
        if [ -n "${line[3]:-}" ] && [ "${line[3]#*,}" != "${line[3]}" ]; then
          weight="${line[3]#*,}";
        fi;
        line[3]=$weight;
        paths[${reply[2]}]="${line[*]}";
        ;;

      OK)
        line=( ${PATHS[${reply[2]}]} );
        weight=$NWEIGHT;
        if [ -n "${line[3]:-}" ]; then
          weight="${line[3]%,*}";
        fi;
        line[3]=$weight;
        paths[${reply[2]}]="${line[*]}";
        ;;

      *)
        echo "WTF is ${reply[0]}!!!" >&2;
        continue;
        ;;
    esac;

      # Iterate over the available paths to determine all nexthop routers
    v="";
    r=0;
    for p in ${ROUTE_PATHS[${reply[1]}]}; do
      if [ -n "${paths[$p]:-}" ]; then
        line=( ${paths[$p]} );
        let r=1+$r;
        if [ $r -gt 1 ]; then
          v="$v nexthop";
        fi;
        v="$v dev ${line[1]} via ${line[2]} weight ${line[3]}";
      fi;
    done;

      # Update the route. Will depend on how many nexthop routers are available
    if [ $r -gt 1 ]; then
      ip route replace ${ROUTES[${reply[1]}]} nexthop $v;

    elif [ $r -gt 0 ]; then
      ip route replace ${ROUTES[${reply[1]}]} $v;

    else
      ip route delete ${ROUTES[${reply[1]}]};
    fi;

      # Flush cached routes
    if [ "${reply[0]}" = "FAIL" ]; then
      line=( ${PATHS[${reply[2]}]} );
      ip route flush cached dev ${line[1]} via ${line[2]};
    fi;

      # Take it easy
    sleep $REST;

  done;
};

